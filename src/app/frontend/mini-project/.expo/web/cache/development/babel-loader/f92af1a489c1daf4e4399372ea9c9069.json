{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Projects\\\\ED1-Mini-Project\\\\src\\\\app\\\\frontend\\\\mini-project\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\mdl\\\\Slider.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, createRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Thumb from \"../internal/Thumb\";\nimport { getTheme } from \"../theme\";\nvar THUMB_SCALE_RATIO = 1.3;\nvar THUMB_BORDER_WIDTH = 2;\nvar TRACK_EXTRA_MARGIN_V = 5;\nvar TRACK_EXTRA_MARGIN_H = 5;\nvar defaultProps = {\n  thumbPadding: 0,\n  thumbRadius: 6,\n  trackSize: 2,\n  min: 0,\n  max: 100,\n  value: 0,\n  step: 1\n};\n\nvar Slider = function (_Component) {\n  _inherits(Slider, _Component);\n\n  var _super = _createSuper(Slider);\n\n  function Slider(props) {\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    _this = _super.call(this, props);\n    _this.theme = getTheme();\n    _this.thumbRef = createRef();\n    _this._value = 0;\n    _this._trackMarginH = 0;\n    _this._trackMarginV = 0;\n    _this._trackTotalLength = 0;\n    _this._thumbRadiiWithBorder = 0;\n    _this._prevPointerX = 0;\n    _this._animatedTrackLength = new Animated.Value(0);\n    _this._panResponder = {};\n\n    _this._onTrackLayout = function (_ref) {\n      var width = _ref.nativeEvent.layout.width;\n\n      if (_this._trackTotalLength !== width) {\n        _this._trackTotalLength = width;\n\n        _this._aniUpdateValue(_this.value);\n      }\n    };\n\n    _this._snap = function (val) {\n      var inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this._defaultStepIncrement();\n      var current = Math.round(val);\n      var half = inc * 0.5;\n      var diff = current % inc;\n\n      if (diff >= half) {\n        var multiplier = Math.round(current / inc);\n        return inc * multiplier;\n      }\n\n      return current - diff;\n    };\n\n    _this._defaultStepIncrement = function () {\n      return _this._toPixelScale(_this.props.max) / (_this.props.max - _this.props.min) / (_this.props.step || 1);\n    };\n\n    _this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n        return true;\n      },\n      onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {\n        return true;\n      },\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {\n        return true;\n      },\n      onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture() {\n        return true;\n      },\n      onPanResponderGrant: function onPanResponderGrant(e) {\n        _this._prevPointerX = e.nativeEvent.locationX;\n\n        _this._onTouchEvent({\n          type: 'TOUCH_DOWN',\n          x: _this._prevPointerX\n        });\n      },\n      onPanResponderMove: function onPanResponderMove(e, state) {\n        _this._onTouchEvent({\n          type: 'TOUCH_MOVE',\n          x: _this._prevPointerX + state.dx\n        });\n      },\n      onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {\n        return false;\n      },\n      onPanResponderRelease: function onPanResponderRelease(e, state) {\n        _this._onPanResponderEnd(state);\n      },\n      onPanResponderTerminate: function onPanResponderTerminate(e, state) {\n        _this._onPanResponderEnd(state, true);\n      },\n      onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {\n        return true;\n      }\n    });\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this._onThumbRadiiUpdate(this.props);\n\n      this._internalSetValue(this.props.value, false);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      this._onThumbRadiiUpdate(nextProps);\n\n      this._internalSetValue(nextProps.value, false);\n\n      this._aniUpdateValue(nextProps.value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this._verifyStep();\n\n      var trackMargin = {\n        marginLeft: this._trackMarginH,\n        marginRight: this._trackMarginH,\n        marginTop: this._trackMarginV,\n        marginBottom: this._trackMarginV\n      };\n      var sliderStyle = this.theme.sliderStyle;\n      var lowerTrackColor = this.props.lowerTrackColor || sliderStyle.lowerTrackColor;\n      var upperTrackColor = this.props.upperTrackColor || sliderStyle.upperTrackColor;\n      return React.createElement(View, _extends({\n        style: [this.props.style, {\n          padding: 0,\n          paddingTop: 0,\n          paddingBottom: 0,\n          paddingLeft: 0,\n          paddingRight: 0\n        }],\n        pointerEvents: \"box-only\"\n      }, this._panResponder.panHandlers, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: _extends({\n          height: this.props.trackSize,\n          backgroundColor: upperTrackColor\n        }, trackMargin),\n        onLayout: this._onTrackLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }\n      }, React.createElement(Animated.View, {\n        style: {\n          position: 'absolute',\n          width: this._animatedTrackLength,\n          height: this.props.trackSize,\n          backgroundColor: lowerTrackColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }\n      })), React.createElement(Thumb, {\n        ref: this.thumbRef,\n        radius: this.props.thumbRadius,\n        enabledColor: lowerTrackColor,\n        disabledColor: upperTrackColor,\n        touchPadding: this.props.thumbPadding,\n        style: {\n          top: this._thumbRadiiWithBorder * (THUMB_SCALE_RATIO - 1) + TRACK_EXTRA_MARGIN_V\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"_internalSetValue\",\n    value: function _internalSetValue(value) {\n      var fireChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (this._value !== value) {\n        this._value = value;\n        fireChange && this._emitChange(value);\n      }\n    }\n  }, {\n    key: \"_emitChange\",\n    value: function _emitChange(newValue) {\n      this.props.onChange && this.props.onChange(newValue);\n    }\n  }, {\n    key: \"_emitOnPressIn\",\n    value: function _emitOnPressIn() {\n      this.props.onPressIn && this.props.onPressIn();\n    }\n  }, {\n    key: \"_emitOnPressOut\",\n    value: function _emitOnPressOut() {\n      this.props.onPressOut && this.props.onPressOut();\n    }\n  }, {\n    key: \"_emitConfirm\",\n    value: function _emitConfirm() {\n      this.props.onConfirm && this.props.onConfirm(this._value);\n    }\n  }, {\n    key: \"_aniUpdateValue\",\n    value: function _aniUpdateValue(value) {\n      if (this._trackTotalLength) {\n        var ratio = (value - this.props.min) / (this.props.max - this.props.min);\n        var x = ratio * this._trackTotalLength;\n\n        this._moveThumb(x);\n\n        this._confirmMoveThumb();\n      }\n    }\n  }, {\n    key: \"_onPanResponderEnd\",\n    value: function _onPanResponderEnd(gestureState) {\n      var cancelled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!cancelled) {\n        this._prevPointerX = this._prevPointerX + gestureState.dx;\n      }\n\n      this._onTouchEvent({\n        type: cancelled ? 'TOUCH_CANCEL' : 'TOUCH_UP',\n        x: this._prevPointerX\n      });\n    }\n  }, {\n    key: \"_onTouchEvent\",\n    value: function _onTouchEvent(evt) {\n      switch (evt.type) {\n        case 'TOUCH_DOWN':\n          this._emitOnPressIn();\n\n          this._updateValueByTouch(evt);\n\n          break;\n\n        case 'TOUCH_MOVE':\n          this._updateValueByTouch(evt);\n\n          break;\n\n        case 'TOUCH_UP':\n          this._emitOnPressOut();\n\n          this._confirmUpdateValueByTouch();\n\n          break;\n\n        case 'TOUCH_CANCEL':\n          this._emitOnPressOut();\n\n          this._confirmUpdateValueByTouch();\n\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"_getTouchOnTrack\",\n    value: function _getTouchOnTrack(evt) {\n      var x = Math.max(evt.x - this._trackMarginH, 0);\n      x = this._snap(Math.min(x, this._trackTotalLength));\n      var ratio = x / this._trackTotalLength;\n      return {\n        x: x,\n        ratio: ratio\n      };\n    }\n  }, {\n    key: \"_updateValueByTouch\",\n    value: function _updateValueByTouch(evt) {\n      var _this$_getTouchOnTrac = this._getTouchOnTrack(evt),\n          x = _this$_getTouchOnTrac.x,\n          ratio = _this$_getTouchOnTrac.ratio;\n\n      var _value = ratio * (this.props.max - this.props.min) + this.props.min;\n\n      this._internalSetValue(_value);\n\n      this._moveThumb(x);\n    }\n  }, {\n    key: \"_toSliderScale\",\n    value: function _toSliderScale(value) {\n      var trackToRange = (this.props.max - this.props.min) / this._trackTotalLength;\n      return value * trackToRange + this.props.min;\n    }\n  }, {\n    key: \"_toPixelScale\",\n    value: function _toPixelScale(value) {\n      var rangeToTrack = this._trackTotalLength / (this.props.max - this.props.min);\n      return (value - this.props.min) * rangeToTrack;\n    }\n  }, {\n    key: \"_confirmUpdateValueByTouch\",\n    value: function _confirmUpdateValueByTouch() {\n      this._confirmMoveThumb();\n\n      this._emitConfirm();\n    }\n  }, {\n    key: \"_moveThumb\",\n    value: function _moveThumb(x) {\n      this.thumbRef.current && this.thumbRef.current.moveTo(x);\n      Animated.timing(this._animatedTrackLength, {\n        toValue: x,\n        duration: 0\n      }).start();\n    }\n  }, {\n    key: \"_confirmMoveThumb\",\n    value: function _confirmMoveThumb() {\n      this.thumbRef.current && this.thumbRef.current.confirmMoveTo();\n    }\n  }, {\n    key: \"_onThumbRadiiUpdate\",\n    value: function _onThumbRadiiUpdate(props) {\n      this._thumbRadiiWithBorder = (props.thumbRadius || 6) + THUMB_BORDER_WIDTH;\n      this._trackMarginV = this._thumbRadiiWithBorder * THUMB_SCALE_RATIO + TRACK_EXTRA_MARGIN_V - (props.trackSize || 2) / 2;\n      this._trackMarginH = this._thumbRadiiWithBorder * THUMB_SCALE_RATIO + TRACK_EXTRA_MARGIN_H;\n    }\n  }, {\n    key: \"_verifyStep\",\n    value: function _verifyStep() {\n      var divisor = this.props.max / (this.props.step || 1);\n\n      if (divisor % 1 !== 0) {\n        throw new Error(\"Given step ( \" + this.props.step + \" ) must be a divisor of max ( \" + this.props.max + \" )\");\n      }\n    }\n  }, {\n    key: \"value\",\n    set: function set(value) {\n      this._internalSetValue(value);\n\n      this._aniUpdateValue(value);\n    },\n    get: function get() {\n      return this._value;\n    }\n  }]);\n\n  return Slider;\n}(Component);\n\nexport { Slider as default };\nSlider.defaultProps = defaultProps;","map":{"version":3,"sources":["C:/Projects/ED1-Mini-Project/src/app/frontend/mini-project/node_modules/react-native-material-kit/lib/mdl/Slider.js"],"names":["React","Component","createRef","Thumb","getTheme","THUMB_SCALE_RATIO","THUMB_BORDER_WIDTH","TRACK_EXTRA_MARGIN_V","TRACK_EXTRA_MARGIN_H","defaultProps","thumbPadding","thumbRadius","trackSize","min","max","value","step","Slider","props","theme","thumbRef","_value","_trackMarginH","_trackMarginV","_trackTotalLength","_thumbRadiiWithBorder","_prevPointerX","_animatedTrackLength","Animated","Value","_panResponder","_onTrackLayout","width","nativeEvent","layout","_aniUpdateValue","_snap","val","inc","_defaultStepIncrement","current","Math","round","half","diff","multiplier","_toPixelScale","PanResponder","create","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderGrant","e","locationX","_onTouchEvent","type","x","onPanResponderMove","state","dx","onPanResponderTerminationRequest","onPanResponderRelease","_onPanResponderEnd","onPanResponderTerminate","onShouldBlockNativeResponder","_onThumbRadiiUpdate","_internalSetValue","nextProps","_verifyStep","trackMargin","marginLeft","marginRight","marginTop","marginBottom","sliderStyle","lowerTrackColor","upperTrackColor","style","padding","paddingTop","paddingBottom","paddingLeft","paddingRight","panHandlers","height","backgroundColor","position","top","fireChange","_emitChange","newValue","onChange","onPressIn","onPressOut","onConfirm","ratio","_moveThumb","_confirmMoveThumb","gestureState","cancelled","evt","_emitOnPressIn","_updateValueByTouch","_emitOnPressOut","_confirmUpdateValueByTouch","_getTouchOnTrack","trackToRange","rangeToTrack","_emitConfirm","moveTo","timing","toValue","duration","start","confirmMoveTo","divisor","Error"],"mappings":"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","sourcesContent":["/**\n * MDL style Slider component.\n *\n * Refer to {@link http://www.getmdl.io/components/index.html#sliders-section | MDL Slider}\n *\n * Created by ywu on 15/8/23.\n */\nimport React, { Component, createRef } from 'react';\nimport { Animated, PanResponder, View, } from 'react-native';\nimport Thumb from '../internal/Thumb';\nimport { getTheme } from '../theme';\n// The max scale of the thumb\nconst THUMB_SCALE_RATIO = 1.3;\n// Width of the thumb border\nconst THUMB_BORDER_WIDTH = 2;\n// extra spacing enlarging the touchable area\nconst TRACK_EXTRA_MARGIN_V = 5;\nconst TRACK_EXTRA_MARGIN_H = 5;\n/** Default props of {@link Slider}, see {@link SliderProps} */\nconst defaultProps = {\n    thumbPadding: 0,\n    thumbRadius: 6,\n    trackSize: 2,\n    min: 0,\n    max: 100,\n    value: 0,\n    step: 1,\n};\n/**\n * The `Slider` component.\n *\n * @remarks\n * See {@link SliderProps} for the available props.\n * Refer to {@link https://material.io/design/components/sliders.html | Guideline} or {@link http://www.getmdl.io/components/index.html#sliders-section | MDL implementation}\n */\nexport default class Slider extends Component {\n    constructor(props) {\n        super(props);\n        /** Reference to App's {@link Theme} */\n        this.theme = getTheme();\n        this.thumbRef = createRef();\n        this._value = 0;\n        this._trackMarginH = 0;\n        this._trackMarginV = 0;\n        this._trackTotalLength = 0;\n        this._thumbRadiiWithBorder = 0;\n        this._prevPointerX = 0;\n        this._animatedTrackLength = new Animated.Value(0);\n        this._panResponder = {};\n        // region Property initializers\n        this._onTrackLayout = ({ nativeEvent: { layout: { width }, }, }) => {\n            if (this._trackTotalLength !== width) {\n                this._trackTotalLength = width;\n                this._aniUpdateValue(this.value);\n            }\n        };\n        // Snap thumb by step, default step = 1\n        this._snap = (val, inc = this._defaultStepIncrement()) => {\n            const current = Math.round(val);\n            const half = inc * 0.5;\n            const diff = current % inc;\n            if (diff >= half) {\n                const multiplier = Math.round(current / inc);\n                return inc * multiplier;\n            }\n            return current - diff;\n        };\n        this._defaultStepIncrement = () => this._toPixelScale(this.props.max) / (this.props.max - this.props.min) / (this.props.step || 1);\n        this._panResponder = PanResponder.create({\n            onStartShouldSetPanResponder: () => true,\n            onStartShouldSetPanResponderCapture: () => true,\n            onMoveShouldSetPanResponder: () => true,\n            onMoveShouldSetPanResponderCapture: () => true,\n            onPanResponderGrant: e => {\n                this._prevPointerX = e.nativeEvent.locationX;\n                this._onTouchEvent({\n                    type: 'TOUCH_DOWN',\n                    x: this._prevPointerX,\n                });\n            },\n            onPanResponderMove: (e, state) => {\n                this._onTouchEvent({\n                    type: 'TOUCH_MOVE',\n                    x: this._prevPointerX + state.dx,\n                });\n            },\n            onPanResponderTerminationRequest: () => false,\n            onPanResponderRelease: (e, state) => {\n                this._onPanResponderEnd(state);\n            },\n            onPanResponderTerminate: (e, state) => {\n                this._onPanResponderEnd(state, true);\n            },\n            onShouldBlockNativeResponder: () => true,\n        });\n    }\n    // Public api to update the current value\n    set value(value) {\n        this._internalSetValue(value);\n        this._aniUpdateValue(value);\n    }\n    // Retrieve the current value\n    get value() {\n        return this._value;\n    }\n    UNSAFE_componentWillMount() {\n        this._onThumbRadiiUpdate(this.props);\n        this._internalSetValue(this.props.value, false);\n    }\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        this._onThumbRadiiUpdate(nextProps);\n        this._internalSetValue(nextProps.value, false);\n        this._aniUpdateValue(nextProps.value);\n    }\n    render() {\n        this._verifyStep();\n        // making room for the Thumb, cause's Android doesn't support `overflow: visible`\n        // - @see http://bit.ly/1Fzr5SE\n        const trackMargin = {\n            marginLeft: this._trackMarginH,\n            marginRight: this._trackMarginH,\n            marginTop: this._trackMarginV,\n            marginBottom: this._trackMarginV,\n        };\n        const sliderStyle = this.theme.sliderStyle;\n        // @ts-ignore\n        const lowerTrackColor = this.props.lowerTrackColor || sliderStyle.lowerTrackColor;\n        // @ts-ignore\n        const upperTrackColor = this.props.upperTrackColor || sliderStyle.upperTrackColor;\n        return (<View style={[\n            this.props.style,\n            {\n                padding: 0,\n                paddingTop: 0,\n                paddingBottom: 0,\n                paddingLeft: 0,\n                paddingRight: 0,\n            },\n        ]} pointerEvents=\"box-only\" {...this._panResponder.panHandlers}>\n        <View style={Object.assign({ height: this.props.trackSize, backgroundColor: upperTrackColor }, trackMargin)} onLayout={this._onTrackLayout}>\n          <Animated.View style={{\n            position: 'absolute',\n            width: this._animatedTrackLength,\n            height: this.props.trackSize,\n            backgroundColor: lowerTrackColor,\n        }}/>\n        </View>\n        <Thumb ref={this.thumbRef} radius={this.props.thumbRadius} \n        // trackSize={this.props.trackSize}\n        // trackMarginH={this._trackMarginH}\n        enabledColor={lowerTrackColor} disabledColor={upperTrackColor} touchPadding={this.props.thumbPadding} style={{\n            top: this._thumbRadiiWithBorder * (THUMB_SCALE_RATIO - 1) + TRACK_EXTRA_MARGIN_V,\n        }}/>\n      </View>);\n    }\n    // endregion\n    _internalSetValue(value, fireChange = true) {\n        if (this._value !== value) {\n            this._value = value;\n            fireChange && this._emitChange(value);\n        }\n    }\n    _emitChange(newValue) {\n        this.props.onChange && this.props.onChange(newValue);\n    }\n    _emitOnPressIn() {\n        this.props.onPressIn && this.props.onPressIn();\n    }\n    _emitOnPressOut() {\n        this.props.onPressOut && this.props.onPressOut();\n    }\n    _emitConfirm() {\n        this.props.onConfirm && this.props.onConfirm(this._value);\n    }\n    _aniUpdateValue(value) {\n        if (this._trackTotalLength) {\n            const ratio = (value - this.props.min) / (this.props.max - this.props.min);\n            const x = ratio * this._trackTotalLength;\n            this._moveThumb(x);\n            this._confirmMoveThumb();\n        }\n    }\n    _onPanResponderEnd(gestureState, cancelled = false) {\n        if (!cancelled) {\n            this._prevPointerX = this._prevPointerX + gestureState.dx;\n        }\n        this._onTouchEvent({\n            type: cancelled ? 'TOUCH_CANCEL' : 'TOUCH_UP',\n            x: this._prevPointerX,\n        });\n    }\n    // Touch events handling\n    _onTouchEvent(evt) {\n        switch (evt.type) {\n            case 'TOUCH_DOWN':\n                this._emitOnPressIn();\n                this._updateValueByTouch(evt);\n                break;\n            case 'TOUCH_MOVE':\n                this._updateValueByTouch(evt);\n                break;\n            case 'TOUCH_UP':\n                this._emitOnPressOut();\n                this._confirmUpdateValueByTouch();\n                break;\n            case 'TOUCH_CANCEL':\n                // should not use the coordination inside a cancelled event\n                this._emitOnPressOut();\n                this._confirmUpdateValueByTouch();\n                break;\n            default:\n                break;\n        }\n    }\n    // get touch position relative to the track\n    _getTouchOnTrack(evt) {\n        // touch location relative to the track\n        let x = Math.max(evt.x - this._trackMarginH, 0);\n        x = this._snap(Math.min(x, this._trackTotalLength));\n        const ratio = x / this._trackTotalLength;\n        return { x, ratio };\n    }\n    _updateValueByTouch(evt) {\n        const { x, ratio } = this._getTouchOnTrack(evt);\n        const _value = ratio * (this.props.max - this.props.min) + this.props.min;\n        this._internalSetValue(_value); // report changes in 'real-time'\n        this._moveThumb(x);\n    }\n    // Scale global xy coordinate values to track values\n    _toSliderScale(value) {\n        const trackToRange = (this.props.max - this.props.min) / this._trackTotalLength;\n        return value * trackToRange + this.props.min;\n    }\n    // Scale track values to global xy coordinate system\n    _toPixelScale(value) {\n        const rangeToTrack = this._trackTotalLength / (this.props.max - this.props.min);\n        return (value - this.props.min) * rangeToTrack;\n    }\n    _confirmUpdateValueByTouch() {\n        this._confirmMoveThumb();\n        this._emitConfirm();\n    }\n    _moveThumb(x) {\n        this.thumbRef.current && this.thumbRef.current.moveTo(x);\n        Animated.timing(this._animatedTrackLength, {\n            toValue: x,\n            duration: 0,\n        }).start();\n    }\n    _confirmMoveThumb() {\n        this.thumbRef.current && this.thumbRef.current.confirmMoveTo();\n    }\n    // when thumb radii updated, re-calc the dimensions\n    _onThumbRadiiUpdate(props) {\n        this._thumbRadiiWithBorder = (props.thumbRadius || 6) + THUMB_BORDER_WIDTH;\n        this._trackMarginV =\n            this._thumbRadiiWithBorder * THUMB_SCALE_RATIO + TRACK_EXTRA_MARGIN_V - (props.trackSize || 2) / 2;\n        this._trackMarginH = this._thumbRadiiWithBorder * THUMB_SCALE_RATIO + TRACK_EXTRA_MARGIN_H;\n    }\n    _verifyStep() {\n        const divisor = this.props.max / (this.props.step || 1);\n        if (divisor % 1 !== 0) {\n            throw new Error(`Given step ( ${this.props.step} ) must be a divisor of max ( ${this.props.max} )`);\n        }\n    }\n}\n/** Defaults, see {@link defaultProps} */\nSlider.defaultProps = defaultProps;\n//# sourceMappingURL=Slider.js.map"]},"metadata":{},"sourceType":"module"}