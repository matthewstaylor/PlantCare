{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Projects\\\\ED1-Mini-Project\\\\src\\\\app\\\\frontend\\\\mini-project\\\\src\\\\components\\\\Dashboard\\\\Dashboard.component.tsx\";\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Surface } from 'react-native-paper';\nimport styles from \"./Dashboard.styles\";\nimport { LineChart } from 'react-native-chart-kit';\n\nvar Dashboard = function Dashboard(props) {\n  var _React$useState = React.useState({\n    labels: [],\n    values: []\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      moistureData = _React$useState2[0],\n      setMoistureData = _React$useState2[1];\n\n  var timer;\n  React.useEffect(function () {\n    getMoistureData();\n    timer = setInterval(function () {\n      return getMoistureData();\n    }, 5000);\n    return function () {\n      clearInterval(timer);\n    };\n  }, []);\n\n  var formatMoistureData = function formatMoistureData(data) {\n    if (data.length) {\n      var labels = data.map(function (el) {\n        return formatAMPM(new Date(el.time_posted));\n      });\n      var values = data.map(function (el) {\n        return el.moisture_content;\n      });\n      setMoistureData({\n        labels: labels,\n        values: values\n      });\n    }\n  };\n\n  function getMoistureData() {\n    fetch('http://ec2-52-14-234-1.us-east-2.compute.amazonaws.com/moisture').then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      formatMoistureData(responseJson);\n    });\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, React.createElement(Surface, {\n    style: styles.surface,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, React.createElement(Chart, {\n    title: 'Moisture',\n    data: moistureData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Dashboard;\nexport function formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12;\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n}\n\nvar Chart = function Chart(props) {\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      fontSize: 18,\n      padding: 16,\n      marginTop: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, props.title), React.createElement(LineChart, {\n    data: {\n      labels: props.data.labels.length ? props.data.labels : [0],\n      datasets: [{\n        data: props.data.values.length ? props.data.values : [0]\n      }]\n    },\n    width: Dimensions.get('window').width - 50,\n    height: 220,\n    yAxisLabel: '',\n    chartConfig: {\n      backgroundColor: '#1cc910',\n      backgroundGradientFrom: '#ffffff',\n      backgroundGradientTo: '#ffffff',\n      decimalPlaces: 2,\n      color: function color() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        return \"rgba(131, 167, 234, 1)\";\n      },\n      style: {\n        borderRadius: 16\n      }\n    },\n    bezier: true,\n    style: {\n      marginVertical: 8,\n      borderRadius: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["C:/Projects/ED1-Mini-Project/src/app/frontend/mini-project/src/components/Dashboard/Dashboard.component.tsx"],"names":["React","Surface","styles","LineChart","Dashboard","props","useState","labels","values","moistureData","setMoistureData","timer","useEffect","getMoistureData","setInterval","clearInterval","formatMoistureData","data","length","map","el","formatAMPM","Date","time_posted","moisture_content","fetch","then","response","json","responseJson","surface","date","hours","getHours","minutes","getMinutes","ampm","strTime","Chart","textAlign","fontSize","padding","marginTop","title","datasets","Dimensions","get","width","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","style","borderRadius","marginVertical"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Text, Dimensions, View, ScrollView, Image} from 'react-native';\r\nimport {Headline, Surface, Button, Card, Title, Paragraph, Divider} from 'react-native-paper';\r\nimport styles from './Dashboard.styles';\r\nimport _ from 'lodash';\r\nimport {\r\n    LineChart,\r\n} from 'react-native-chart-kit';\r\nimport WateringSchedule from \"../WateringSchedule/WateringSchedule.component\";\r\n\r\ninterface MoistureData {\r\n    id: number;\r\n    moisture_content: 0;\r\n    time_posted: string;\r\n}\r\n\r\nconst Dashboard = (props: any) => {\r\n    const [moistureData, setMoistureData] = React.useState({\r\n        labels: [],\r\n        values: []\r\n    });\r\n    let timer: any;\r\n    React.useEffect(() => {\r\n        getMoistureData();\r\n        // returned function will be called on component unmount\r\n        timer = setInterval(\r\n            () => getMoistureData(), // call updated latest 5 posts every 5 seconds\r\n            5000\r\n        );\r\n        return () => {\r\n            clearInterval(timer);\r\n        }\r\n    }, []);\r\n\r\n    const formatMoistureData = (data: Array<MoistureData>) => {\r\n        if (data.length) {\r\n            let labels = data.map(el => formatAMPM(new Date(el.time_posted)));\r\n            let values = data.map(el => el.moisture_content);\r\n            // @ts-ignore\r\n            setMoistureData({labels: labels, values: values});\r\n        }\r\n    };\r\n\r\n    function getMoistureData() {\r\n        fetch('http://ec2-52-14-234-1.us-east-2.compute.amazonaws.com/moisture')\r\n            .then((response) => response.json())\r\n            .then((responseJson) => {\r\n                formatMoistureData(responseJson);\r\n                // setMoistureData(responseJson);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Surface style={styles.surface}>\r\n                <Chart title={'Moisture'} data={moistureData}/>\r\n            </Surface>\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default Dashboard;\r\n\r\nexport function formatAMPM(date: Date) {\r\n    let hours = date.getHours();\r\n    let minutes = date.getMinutes();\r\n    let ampm = hours >= 12 ? 'pm' : 'am';\r\n    hours = hours % 12;\r\n    hours = hours ? hours : 12; // the hour '0' should be '12'\r\n    // @ts-ignore\r\n    minutes = minutes < 10 ? '0' + minutes : minutes;\r\n    var strTime = hours + ':' + minutes + ' ' + ampm;\r\n    return strTime;\r\n}\r\n\r\nconst Chart = (props: any) => {\r\n    return <React.Fragment>\r\n        <Text\r\n            style={{\r\n                textAlign: 'center',\r\n                fontSize: 18,\r\n                padding: 16,\r\n                marginTop: 16,\r\n            }}>\r\n            {props.title}\r\n        </Text>\r\n        <LineChart\r\n            data={{\r\n                labels: props.data.labels.length ? props.data.labels : [0],\r\n                datasets: [\r\n                    {\r\n                        data: props.data.values.length ? props.data.values : [0],\r\n                    },\r\n                ],\r\n            }}\r\n            width={Dimensions.get('window').width - 50} // from react-native\r\n            height={220}\r\n            yAxisLabel={''}\r\n            chartConfig={{\r\n                backgroundColor: '#1cc910',\r\n                backgroundGradientFrom: '#ffffff',\r\n                backgroundGradientTo: '#ffffff',\r\n                decimalPlaces: 2, // optional, defaults to 2dp\r\n                color: (opacity = 0) => `rgba(131, 167, 234, 1)`,\r\n                style: {\r\n                    borderRadius: 16,\r\n                },\r\n            }}\r\n            bezier\r\n            style={{\r\n                marginVertical: 8,\r\n                borderRadius: 16,\r\n            }}\r\n        />\r\n    </React.Fragment>\r\n};\r\n"]},"metadata":{},"sourceType":"module"}