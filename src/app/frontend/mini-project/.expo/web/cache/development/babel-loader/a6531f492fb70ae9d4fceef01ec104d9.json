{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Projects\\\\ED1-Mini-Project\\\\src\\\\app\\\\frontend\\\\mini-project\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\mdl\\\\IconToggle.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Children, Component } from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport MKColor from \"../MKColor\";\nimport { getTheme } from \"../theme\";\nimport * as utils from \"../utils\";\nimport Ripple from \"./Ripple\";\n\nfunction isViewForState(view, isChecked) {\n  if (!view) {\n    return false;\n  }\n\n  var props = view.hasOwnProperty('props') ? view.props : {};\n  return props.stateChecked && isChecked || !(props.stateChecked || isChecked);\n}\n\nvar defaultProps = {\n  checked: false,\n  enabled: true,\n  maskColor: MKColor.Transparent,\n  pointerEvents: 'box-only',\n  style: {\n    height: 56,\n    width: 56,\n    alignItems: 'center',\n    borderColor: 'rgba(0,0,0,.54)',\n    justifyContent: 'center'\n  }\n};\n\nvar IconToggle = function (_Component) {\n  _inherits(IconToggle, _Component);\n\n  var _super = _createSuper(IconToggle);\n\n  function IconToggle(props) {\n    var _this;\n\n    _classCallCheck(this, IconToggle);\n\n    _this = _super.call(this, props);\n    _this.theme = getTheme();\n\n    _this.renderChildren = function () {\n      return Children.map(_this.props.children, function (child) {\n        return child && isViewForState(child, _this.state.checked) ? child : undefined;\n      });\n    };\n\n    _this.onTouch = function (_ref) {\n      var type = _ref.type;\n\n      if (type === 'TOUCH_UP') {\n        _this.confirmToggle();\n      }\n    };\n\n    _this.state = {\n      checked: false\n    };\n    return _this;\n  }\n\n  _createClass(IconToggle, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.setState({\n        checked: this.props.checked || false\n      });\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.checked !== this.props.checked && nextProps.checked !== this.state.checked) {\n        this.setState({\n          checked: nextProps.checked || false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var mergedStyle = _extends({}, this.theme.iconToggleStyle, utils.compact({\n        rippleColor: this.props.rippleColor\n      }));\n\n      return React.createElement(TouchableWithoutFeedback, _extends({}, utils.extractTouchableProps(this), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }\n      }), React.createElement(Ripple, _extends({}, this.props, {\n        rippleColor: mergedStyle.rippleColor,\n        style: [defaultProps.style, this.props.style],\n        maskBorderRadiusInPercent: 50,\n        rippleLocation: \"center\",\n        onTouch: this.onTouch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }), this.renderChildren()));\n    }\n  }, {\n    key: \"confirmToggle\",\n    value: function confirmToggle() {\n      var _this2 = this;\n\n      var prevState = this.state.checked;\n      this.setState({\n        checked: !prevState\n      }, function () {\n        return _this2.props.onCheckedChange && _this2.props.onCheckedChange({\n          checked: _this2.state.checked\n        });\n      });\n    }\n  }]);\n\n  return IconToggle;\n}(Component);\n\nexport { IconToggle as default };\nIconToggle.defaultProps = defaultProps;","map":{"version":3,"sources":["C:/Projects/ED1-Mini-Project/src/app/frontend/mini-project/node_modules/react-native-material-kit/lib/mdl/IconToggle.js"],"names":["React","Children","Component","MKColor","getTheme","utils","Ripple","isViewForState","view","isChecked","props","hasOwnProperty","stateChecked","defaultProps","checked","enabled","maskColor","Transparent","pointerEvents","style","height","width","alignItems","borderColor","justifyContent","IconToggle","theme","renderChildren","map","children","child","state","undefined","onTouch","type","confirmToggle","setState","nextProps","mergedStyle","iconToggleStyle","compact","rippleColor","extractTouchableProps","prevState","onCheckedChange"],"mappings":"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","sourcesContent":["/**\n * MDL-style Icon Toggle component.\n *\n * See {@link https://getmdl.io/components/index.html#toggles-section/icon-toggle | MDL Icon Toggle}\n *\n * Created by ywu on 15/10/07.\n */\nimport React, { Children, Component } from 'react';\nimport { TouchableWithoutFeedback } from 'react-native';\nimport MKColor from '../MKColor';\nimport { getTheme } from '../theme';\nimport * as utils from '../utils';\nimport Ripple from './Ripple';\n/** Check if the `stateChecked` prop matches the `isChecked` state. */\nfunction isViewForState(view, isChecked) {\n    if (!view) {\n        return false;\n    }\n    // @ts-ignore\n    const props = view.hasOwnProperty('props') ? view.props : {};\n    return (props.stateChecked && isChecked) || !(props.stateChecked || isChecked);\n}\n/** Default props of {@link IconToggle} */\nconst defaultProps = {\n    checked: false,\n    enabled: true,\n    maskColor: MKColor.Transparent,\n    pointerEvents: 'box-only',\n    style: {\n        height: 56,\n        width: 56,\n        alignItems: 'center',\n        borderColor: 'rgba(0,0,0,.54)',\n        justifyContent: 'center',\n    },\n};\n/**\n * The `IconToggle` component.\n *\n * See {@link https://getmdl.io/components/index.html#toggles-section/icon-toggle | MDL implementation}\n */\nexport default class IconToggle extends Component {\n    constructor(props) {\n        super(props);\n        this.theme = getTheme();\n        /**\n         * Select a child element to show for the current toggle status.\n         * @see [State List](http://developer.android.com/guide/topics/resources/drawable-resource.html#StateList) in Android development\n         */\n        this.renderChildren = () => Children.map(this.props.children, child => child && isViewForState(child, this.state.checked) ? child : undefined);\n        /** Touch event handler */\n        this.onTouch = ({ type }) => {\n            if (type === 'TOUCH_UP') {\n                this.confirmToggle();\n            }\n        };\n        this.state = { checked: false };\n    }\n    UNSAFE_componentWillMount() {\n        this.setState({ checked: this.props.checked || false });\n    }\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (nextProps.checked !== this.props.checked && nextProps.checked !== this.state.checked) {\n            this.setState({ checked: nextProps.checked || false });\n        }\n    }\n    render() {\n        const mergedStyle = Object.assign({}, this.theme.iconToggleStyle, utils.compact({\n            rippleColor: this.props.rippleColor,\n        }));\n        return (<TouchableWithoutFeedback {...utils.extractTouchableProps(this)}>\n        <Ripple {...this.props} rippleColor={mergedStyle.rippleColor} style={[defaultProps.style, this.props.style]} maskBorderRadiusInPercent={50} rippleLocation=\"center\" onTouch={this.onTouch}>\n          {this.renderChildren()}\n        </Ripple>\n      </TouchableWithoutFeedback>);\n    }\n    /** When a toggle action (from the given state) is confirmed. */\n    confirmToggle() {\n        const prevState = this.state.checked;\n        this.setState({ checked: !prevState }, () => this.props.onCheckedChange && this.props.onCheckedChange({ checked: this.state.checked }));\n    }\n}\n/** Default props */\nIconToggle.defaultProps = defaultProps;\n//# sourceMappingURL=IconToggle.js.map"]},"metadata":{},"sourceType":"module"}