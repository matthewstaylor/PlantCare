{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport PropTypes from 'prop-types';\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { compose, indexOf, isNil, keys, not, partial, pickBy, reject } from 'ramda';\n\nfunction isType(type, obj) {\n  return Object.toString.call(obj) === \"[object \" + type + \"]\";\n}\n\nexport var isArgument = partial(isType, ['Arguments']);\nexport var isFunction = partial(isType, ['Function']);\nexport var isString = partial(isType, ['String']);\nexport var isNumber = partial(isType, ['Number']);\nexport var isDate = partial(isType, ['Date']);\nexport var isRegExp = partial(isType, ['RegExp']);\nexport var isError = partial(isType, ['Error']);\nvar compact = reject(isNil);\nvar isNotNil = compose(not, isNil);\n\nfunction capitalize(str) {\n  return str.substring(0, 1).toUpperCase() + str.substring(1);\n}\n\nvar toPixels = PixelRatio.getPixelSizeForLayoutSize.bind(PixelRatio);\n\nfunction toDips(px) {\n  return px / PixelRatio.get();\n}\n\nfunction convertCoordinate(value) {\n  return Platform.OS === 'android' ? toDips(value) : value;\n}\n\nfunction getFontSize(sp) {\n  return sp * PixelRatio.getFontScale();\n}\n\nfunction extractPropsBy(view, filter) {\n  return pickBy(filter, view.props);\n}\n\nfunction extractProps(view, propTypes) {\n  var propNames = Array.isArray(propTypes) ? propTypes : keys(propTypes);\n\n  var filter = function filter(v, k) {\n    return indexOf(k, propNames) >= 0 && isNotNil(v);\n  };\n\n  return pickBy(filter, view.props);\n}\n\nfunction extractTouchableProps(view) {\n  return extractProps(view, _extends(_extends({}, TouchableWithoutFeedback.propTypes), {\n    testID: PropTypes.string\n  }));\n}\n\nexport { capitalize, compact, toPixels, toDips, convertCoordinate, getFontSize, extractProps, extractPropsBy, extractTouchableProps, processColor as parseColor };","map":{"version":3,"sources":["C:/Projects/ED1-Mini-Project/src/app/frontend/mini-project/node_modules/react-native-material-kit/lib/utils.js"],"names":["PropTypes","compose","indexOf","isNil","keys","not","partial","pickBy","reject","isType","type","obj","Object","toString","call","isArgument","isFunction","isString","isNumber","isDate","isRegExp","isError","compact","isNotNil","capitalize","str","substring","toUpperCase","toPixels","PixelRatio","getPixelSizeForLayoutSize","bind","toDips","px","get","convertCoordinate","value","Platform","OS","getFontSize","sp","getFontScale","extractPropsBy","view","filter","props","extractProps","propTypes","propNames","Array","isArray","v","k","extractTouchableProps","TouchableWithoutFeedback","testID","string","processColor","parseColor"],"mappings":"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","sourcesContent":["// Utilities\n//\n// Created by ywu on 15/7/18.\n//\nimport PropTypes from 'prop-types';\nimport { PixelRatio, Platform, processColor, TouchableWithoutFeedback } from 'react-native';\nimport { compose, indexOf, isNil, keys, not, partial, pickBy, reject } from 'ramda';\n// Add some is-Type methods:\nfunction isType(type, obj) {\n    return Object.toString.call(obj) === `[object ${type}]`;\n}\nexport const isArgument = partial(isType, ['Arguments']);\nexport const isFunction = partial(isType, ['Function']);\nexport const isString = partial(isType, ['String']);\nexport const isNumber = partial(isType, ['Number']);\nexport const isDate = partial(isType, ['Date']);\nexport const isRegExp = partial(isType, ['RegExp']);\nexport const isError = partial(isType, ['Error']);\n// Remove keys with null value from the given object\nconst compact = reject(isNil);\nconst isNotNil = compose(not, isNil);\nfunction capitalize(str) {\n    return str.substring(0, 1).toUpperCase() + str.substring(1);\n}\n// Convert dips to pixels\nconst toPixels = PixelRatio.getPixelSizeForLayoutSize.bind(PixelRatio);\n// Convert pixels back to dips\nfunction toDips(px) {\n    return px / PixelRatio.get();\n}\n// Convert native coordinate value into unit used in JSX\nfunction convertCoordinate(value) {\n    return Platform.OS === 'android' ? toDips(value) : value;\n}\n// Get font size according to the screen density\nfunction getFontSize(sp) {\n    return sp * PixelRatio.getFontScale();\n}\n// Extract the specified props from the given component instance.\n// - {`object`} `view` the component instance\n// - {`(v,k):boolean`} `filter` predictor to determine which prop should be extracted\nfunction extractPropsBy(view, filter) {\n    return pickBy(filter, view.props);\n}\n// Extract the specified props from the given component instance.\n// - {`object`} `view` the component instance\n// - {`array`|`object`} `propTypes` props definitions\nfunction extractProps(view, propTypes) {\n    const propNames = Array.isArray(propTypes) ? propTypes : keys(propTypes);\n    const filter = (v, k) => indexOf(k, propNames) >= 0 && isNotNil(v);\n    return pickBy(filter, view.props);\n}\n// Extract Touchable props from the given component instance.\n// - {`object`} `view` the component instance\nfunction extractTouchableProps(view) {\n    return extractProps(view, Object.assign(Object.assign({}, TouchableWithoutFeedback.propTypes), { testID: PropTypes.string }));\n}\n// ## Public interface\nexport { capitalize, compact, toPixels, toDips, convertCoordinate, getFontSize, extractProps, extractPropsBy, extractTouchableProps, processColor as parseColor, };\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}