{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Projects\\\\ED1-Mini-Project\\\\src\\\\app\\\\frontend\\\\mini-project\\\\src\\\\components\\\\Humidity\\\\Humidity.component.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Surface } from 'react-native-paper';\nimport { LineChart } from 'react-native-chart-kit';\nimport { Component } from 'react';\nimport styles from \"../Dashboard/Dashboard.styles\";\n\nvar Humidity = function (_Component) {\n  _inherits(Humidity, _Component);\n\n  var _super = _createSuper(Humidity);\n\n  function Humidity(_props) {\n    var _this;\n\n    _classCallCheck(this, Humidity);\n\n    _this = _super.call(this, _props);\n    _this.THEME_PRIMARY_COLOR = '#0a4f28';\n    _this.state = {\n      data: [{\n        id: -1,\n        humidity: -1,\n        time_posted: ''\n      }],\n      formattedData: {\n        labels: [],\n        values: []\n      }\n    };\n\n    _this.formatHumidityData = function (data) {\n      var labels = data.map(function (el) {\n        return _this.formatAMPM(new Date(el.time_posted));\n      });\n      var values = data.map(function (el) {\n        return el.humidity;\n      });\n\n      _this.setState({\n        formattedData: {\n          labels: labels,\n          values: values\n        }\n      });\n    };\n\n    _this.Chart = function (props) {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 16\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: 'center',\n          fontSize: 18,\n          padding: 16,\n          marginTop: 16\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, props.title), React.createElement(LineChart, {\n        data: {\n          labels: props.data.labels.length ? props.data.labels : [0],\n          datasets: [{\n            data: props.data.values.length ? props.data.values : [0]\n          }]\n        },\n        width: Dimensions.get('window').width - 50,\n        height: 220,\n        yAxisLabel: '',\n        chartConfig: {\n          backgroundColor: '#1cc910',\n          backgroundGradientFrom: '#ffffff',\n          backgroundGradientTo: '#ffffff',\n          decimalPlaces: 2,\n          color: function color() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            return \"rgba(131, 167, 234, 1)\";\n          },\n          style: {\n            borderRadius: 16\n          }\n        },\n        bezier: true,\n        style: {\n          marginVertical: 8,\n          borderRadius: 16\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(Humidity, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }\n      }, React.createElement(Surface, {\n        style: styles.surface,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }\n      }, React.createElement(this.Chart, {\n        title: 'Humidity',\n        data: this.state.formattedData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }\n      })));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log('Humidity component mounted.');\n      this.getHumidityData();\n      this.timer = setInterval(function () {\n        return _this2.getHumidityData();\n      }, 5000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"formatAMPM\",\n    value: function formatAMPM(date) {\n      var hours = date.getHours();\n      var minutes = date.getMinutes();\n      var ampm = hours >= 12 ? 'pm' : 'am';\n      hours = hours % 12;\n      hours = hours ? hours : 12;\n      minutes = minutes < 10 ? '0' + minutes : minutes;\n      var strTime = hours + ':' + minutes + ' ' + ampm;\n      return strTime;\n    }\n  }, {\n    key: \"getHumidityData\",\n    value: function getHumidityData() {\n      var _this3 = this;\n\n      fetch('http://ec2-52-14-234-1.us-east-2.compute.amazonaws.com/humidity').then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        _this3.setState({\n          data: responseJson\n        });\n\n        _this3.formatHumidityData(_this3.state.data);\n      });\n    }\n  }]);\n\n  return Humidity;\n}(Component);\n\nexport default Humidity;","map":{"version":3,"sources":["C:/Projects/ED1-Mini-Project/src/app/frontend/mini-project/src/components/Humidity/Humidity.component.tsx"],"names":["React","Surface","LineChart","Component","styles","Humidity","props","THEME_PRIMARY_COLOR","state","data","id","humidity","time_posted","formattedData","labels","values","formatHumidityData","map","el","formatAMPM","Date","setState","Chart","textAlign","fontSize","padding","marginTop","title","length","datasets","Dimensions","get","width","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","style","borderRadius","marginVertical","surface","console","log","getHumidityData","timer","setInterval","clearInterval","date","hours","getHours","minutes","getMinutes","ampm","strTime","fetch","then","response","json","responseJson"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Text, Dimensions } from 'react-native';\r\nimport { Surface } from 'react-native-paper';\r\nimport { LineChart } from 'react-native-chart-kit';\r\nimport { MKColor } from 'react-native-material-kit';\r\nimport { Component } from 'react';\r\nimport styles from '../Dashboard/Dashboard.styles'\r\n\r\ninterface HumidityData {\r\n    'humidity': number;\r\n    'time_posted': string;\r\n}\r\n\r\nclass Humidity extends Component<any, any> {\r\n\r\n    THEME_PRIMARY_COLOR = '#0a4f28';\r\n    \r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        data: [{\r\n            id: -1,\r\n            humidity: -1,\r\n            time_posted: ''\r\n        }],\r\n        formattedData: {\r\n            labels: [],\r\n            values: []\r\n        }\r\n    }\r\n\r\n    timer: any;\r\n\r\n    render () {\r\n        return (\r\n            <React.Fragment>\r\n                <Surface style={styles.surface}>\r\n                    <this.Chart title={'Humidity'} data={this.state.formattedData}/>\r\n                </Surface>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log('Humidity component mounted.');\r\n        this.getHumidityData();\r\n        this.timer = setInterval(\r\n          () => this.getHumidityData(), //call latest 10 posts every 5 seconds\r\n          5000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    formatAMPM(date: Date) {\r\n        let hours = date.getHours();\r\n        let minutes = date.getMinutes();\r\n        let ampm = hours >= 12 ? 'pm' : 'am';\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12; // the hour '0' should be '12'\r\n        // @ts-ignore\r\n        minutes = minutes < 10 ? '0' + minutes : minutes;\r\n        var strTime = hours + ':' + minutes + ' ' + ampm;\r\n        return strTime;\r\n    }\r\n\r\n    getHumidityData() {\r\n        fetch('http://ec2-52-14-234-1.us-east-2.compute.amazonaws.com/humidity')\r\n        .then((response) => response.json())\r\n        .then((responseJson) => {\r\n            this.setState({ data: responseJson });\r\n            this.formatHumidityData(this.state.data);\r\n        });\r\n    }\r\n\r\n    formatHumidityData = (data: Array<HumidityData>) => {\r\n        let labels = data.map(el => this.formatAMPM(new Date(el.time_posted)));\r\n        let values = data.map(el => el.humidity);\r\n        // @ts-ignore\r\n        this.setState({ formattedData: {labels, values} });\r\n    };\r\n\r\n    Chart = (props: any) => {\r\n        return <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    textAlign: 'center',\r\n                    fontSize: 18,\r\n                    padding: 16,\r\n                    marginTop: 16,\r\n                }}>\r\n                {props.title}\r\n            </Text>\r\n            <LineChart\r\n                data={{\r\n                    labels: props.data.labels.length ? props.data.labels : [0],\r\n                    datasets: [\r\n                        {\r\n                            data: props.data.values.length ? props.data.values : [0],\r\n                        },\r\n                    ],\r\n                }}\r\n                width={Dimensions.get('window').width - 50} // from react-native\r\n                height={220}\r\n                yAxisLabel={''}\r\n                chartConfig={{\r\n                    backgroundColor: '#1cc910',\r\n                    backgroundGradientFrom: '#ffffff',\r\n                    backgroundGradientTo: '#ffffff',\r\n                    decimalPlaces: 2, // optional, defaults to 2dp\r\n                    color: (opacity = 0) => `rgba(131, 167, 234, 1)`,\r\n                    style: {\r\n                        borderRadius: 16,\r\n                    },\r\n                }}\r\n                bezier\r\n                style={{\r\n                    marginVertical: 8,\r\n                    borderRadius: 16,\r\n                }}\r\n            />\r\n        </React.Fragment>\r\n    }\r\n}\r\nexport default Humidity;"]},"metadata":{},"sourceType":"module"}