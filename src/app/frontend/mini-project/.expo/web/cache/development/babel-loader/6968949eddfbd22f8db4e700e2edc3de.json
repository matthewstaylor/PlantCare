{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Projects\\\\ED1-Mini-Project\\\\src\\\\app\\\\frontend\\\\mini-project\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\mdl\\\\RadioButton.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MKColor from \"../MKColor\";\nimport { getTheme } from \"../theme\";\nimport * as utils from \"../utils\";\nimport Ripple from \"./Ripple\";\nvar DEFAULT_EXTRA_RIPPLE_RADII = 16;\nvar defaultProps = {\n  maskColor: MKColor.Transparent,\n  pointerEvents: 'box-only',\n  style: {\n    alignItems: 'center',\n    borderRadius: 10,\n    borderWidth: 2,\n    height: 20,\n    justifyContent: 'center',\n    width: 20\n  }\n};\n\nvar RadioButton = function (_Component) {\n  _inherits(RadioButton, _Component);\n\n  var _super = _createSuper(RadioButton);\n\n  function RadioButton(props) {\n    var _this;\n\n    _classCallCheck(this, RadioButton);\n\n    _this = _super.call(this, props);\n    _this.theme = getTheme();\n    _this.animatedSize = new Animated.Value(0);\n    _this.animatedRadius = new Animated.Value(0);\n\n    _this.onLayout = function (_ref) {\n      var _ref$nativeEvent$layo = _ref.nativeEvent.layout,\n          width = _ref$nativeEvent$layo.width,\n          height = _ref$nativeEvent$layo.height;\n\n      if (width === _this.state.width && height === _this.state.height) {\n        return;\n      }\n\n      var padding = _this.props.extraRippleRadius || DEFAULT_EXTRA_RIPPLE_RADII;\n\n      _this.setState({\n        height: height + padding,\n        width: width + padding\n      });\n    };\n\n    _this.onTouch = function (_ref2) {\n      var type = _ref2.type;\n\n      if (type === 'TOUCH_UP') {\n        if (!_this.state.checked) {\n          _this.confirmToggle();\n        }\n      }\n    };\n\n    _this.state = {\n      checked: false,\n      height: 0,\n      width: 0\n    };\n    return _this;\n  }\n\n  _createClass(RadioButton, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.group = this.props.group;\n      this.initView(this.props.checked);\n      this.group && this.group.add(this);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.group !== nextProps.group) {\n        this.group && this.group.remove(this);\n        this.group = nextProps.group;\n        this.group && this.group.add(this);\n      }\n\n      if (nextProps.checked !== this.props.checked && nextProps.checked !== this.state.checked) {\n        this.initView(nextProps.checked);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.group && this.group.remove(this);\n    }\n  }, {\n    key: \"confirmToggle\",\n    value: function confirmToggle() {\n      var _this2 = this;\n\n      var prevState = this.state.checked;\n      var newState = !prevState;\n      this.setState({\n        checked: newState\n      }, function () {\n        return _this2.emitCheckedChange(newState);\n      });\n      this.group && this.group.onChecked(this, newState);\n      this.aniChecked(newState);\n    }\n  }, {\n    key: \"confirmUncheck\",\n    value: function confirmUncheck() {\n      var _this3 = this;\n\n      this.setState({\n        checked: false\n      }, function () {\n        return _this3.emitCheckedChange(false);\n      });\n      this.aniChecked(false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var defaultStyle = this.theme.radioStyle;\n\n      var mergedStyle = _extends({}, defaultStyle, utils.extractProps(this, ['borderOnColor', 'borderOffColor', 'fillColor', 'rippleColor']));\n\n      var borderColor = this.state.checked ? mergedStyle.borderOnColor : mergedStyle.borderOffColor;\n      return React.createElement(TouchableWithoutFeedback, _extends({}, utils.extractTouchableProps(this), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }), React.createElement(Ripple, _extends({}, this.props, {\n        maskBorderRadiusInPercent: 50,\n        rippleLocation: \"center\",\n        rippleColor: mergedStyle.rippleColor,\n        onTouch: this.onTouch,\n        style: {\n          alignItems: 'center',\n          height: this.state.height,\n          justifyContent: 'center',\n          width: this.state.width\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: [defaultProps.style, {\n          borderColor: borderColor\n        }, this.props.style],\n        onLayout: this.onLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }\n      }, React.createElement(Animated.View, {\n        style: {\n          backgroundColor: mergedStyle.fillColor,\n          borderRadius: this.animatedRadius,\n          height: this.animatedSize,\n          width: this.animatedSize\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }, {\n    key: \"initView\",\n    value: function initView() {\n      var checked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.setState({\n        checked: checked\n      });\n      this.aniChecked(checked);\n    }\n  }, {\n    key: \"emitCheckedChange\",\n    value: function emitCheckedChange(checked) {\n      this.props.onCheckedChange && this.props.onCheckedChange({\n        checked: checked\n      });\n    }\n  }, {\n    key: \"aniChecked\",\n    value: function aniChecked(checked) {\n      Animated.parallel([Animated.timing(this.animatedRadius, {\n        duration: 220,\n        toValue: checked ? 5 : 0\n      }), Animated.timing(this.animatedSize, {\n        duration: 220,\n        toValue: checked ? 10 : 0\n      })]).start();\n    }\n  }]);\n\n  return RadioButton;\n}(Component);\n\nexport { RadioButton as default };\nRadioButton.defaultProps = defaultProps;","map":{"version":3,"sources":["C:/Projects/ED1-Mini-Project/src/app/frontend/mini-project/node_modules/react-native-material-kit/lib/mdl/RadioButton.js"],"names":["React","Component","MKColor","getTheme","utils","Ripple","DEFAULT_EXTRA_RIPPLE_RADII","defaultProps","maskColor","Transparent","pointerEvents","style","alignItems","borderRadius","borderWidth","height","justifyContent","width","RadioButton","props","theme","animatedSize","Animated","Value","animatedRadius","onLayout","nativeEvent","layout","state","padding","extraRippleRadius","setState","onTouch","type","checked","confirmToggle","group","initView","add","nextProps","remove","prevState","newState","emitCheckedChange","onChecked","aniChecked","defaultStyle","radioStyle","mergedStyle","extractProps","borderColor","borderOnColor","borderOffColor","extractTouchableProps","rippleColor","backgroundColor","fillColor","onCheckedChange","parallel","timing","duration","toValue","start"],"mappings":"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","sourcesContent":["/**\n * MDL-style Radio button component.\n *\n * See [MDL Radio Button](http://www.getmdl.io/components/index.html#toggles-section/radio)\n *\n * Created by ywu on 15/10/12.\n */\nimport React, { Component } from 'react';\nimport { Animated, TouchableWithoutFeedback, View, } from 'react-native';\nimport MKColor from '../MKColor';\nimport { getTheme } from '../theme';\nimport * as utils from '../utils';\nimport Ripple from './Ripple';\nconst DEFAULT_EXTRA_RIPPLE_RADII = 16;\n/** Default props of {@link RadioButton} */\nconst defaultProps = {\n    maskColor: MKColor.Transparent,\n    pointerEvents: 'box-only',\n    style: {\n        alignItems: 'center',\n        borderRadius: 10,\n        borderWidth: 2,\n        height: 20,\n        justifyContent: 'center',\n        width: 20,\n    },\n};\n/**\n * The `RadioButton` component.\n *\n * @remarks\n * See {@link https://material.io/components/selection-controls/#radio-buttons | Guideline} & {@link http://www.getmdl.io/components/index.html#toggles-section/radio | MDL implementation}\n */\nexport default class RadioButton extends Component {\n    constructor(props) {\n        super(props);\n        this.theme = getTheme();\n        this.animatedSize = new Animated.Value(0);\n        this.animatedRadius = new Animated.Value(0);\n        /** Layout event handler */\n        this.onLayout = ({ nativeEvent: { layout: { width, height }, }, }) => {\n            if (width === this.state.width && height === this.state.height) {\n                return;\n            }\n            const padding = this.props.extraRippleRadius || DEFAULT_EXTRA_RIPPLE_RADII;\n            this.setState({\n                height: height + padding,\n                width: width + padding,\n            });\n        };\n        /** Touch event handler */\n        this.onTouch = ({ type }) => {\n            if (type === 'TOUCH_UP') {\n                if (!this.state.checked) {\n                    this.confirmToggle();\n                }\n            }\n        };\n        this.state = {\n            checked: false,\n            height: 0,\n            width: 0,\n        };\n    }\n    UNSAFE_componentWillMount() {\n        this.group = this.props.group;\n        this.initView(this.props.checked);\n        this.group && this.group.add(this);\n    }\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (this.group !== nextProps.group) {\n            this.group && this.group.remove(this);\n            this.group = nextProps.group;\n            this.group && this.group.add(this);\n        }\n        if (nextProps.checked !== this.props.checked && nextProps.checked !== this.state.checked) {\n            this.initView(nextProps.checked);\n        }\n    }\n    componentWillUnmount() {\n        this.group && this.group.remove(this);\n    }\n    // When a toggle action (from the given state) is confirmed.\n    confirmToggle() {\n        const prevState = this.state.checked;\n        const newState = !prevState;\n        this.setState({ checked: newState }, () => this.emitCheckedChange(newState));\n        // update state of the other buttons in the group\n        this.group && this.group.onChecked(this, newState);\n        this.aniChecked(newState);\n    }\n    confirmUncheck() {\n        this.setState({ checked: false }, () => this.emitCheckedChange(false));\n        this.aniChecked(false);\n    }\n    render() {\n        const defaultStyle = this.theme.radioStyle;\n        const mergedStyle = Object.assign({}, defaultStyle, utils.extractProps(this, ['borderOnColor', 'borderOffColor', 'fillColor', 'rippleColor']));\n        const borderColor = this.state.checked ? mergedStyle.borderOnColor : mergedStyle.borderOffColor;\n        return (<TouchableWithoutFeedback {...utils.extractTouchableProps(this)}>\n        <Ripple {...this.props} maskBorderRadiusInPercent={50} rippleLocation=\"center\" rippleColor={mergedStyle.rippleColor} onTouch={this.onTouch} style={{\n            alignItems: 'center',\n            height: this.state.height,\n            justifyContent: 'center',\n            width: this.state.width,\n        }}>\n          <View style={[defaultProps.style, { borderColor }, this.props.style]} onLayout={this.onLayout}>\n            <Animated.View style={{\n            backgroundColor: mergedStyle.fillColor,\n            borderRadius: this.animatedRadius,\n            height: this.animatedSize,\n            width: this.animatedSize,\n        }}/>\n          </View>\n        </Ripple>\n      </TouchableWithoutFeedback>);\n    }\n    initView(checked = false) {\n        this.setState({ checked });\n        this.aniChecked(checked);\n    }\n    emitCheckedChange(checked) {\n        this.props.onCheckedChange && this.props.onCheckedChange({ checked });\n    }\n    /** animate the checked state, by scaling the inner circle */\n    aniChecked(checked) {\n        Animated.parallel([\n            Animated.timing(this.animatedRadius, {\n                duration: 220,\n                toValue: checked ? 5 : 0,\n            }),\n            Animated.timing(this.animatedSize, {\n                duration: 220,\n                toValue: checked ? 10 : 0,\n            }),\n        ]).start();\n    }\n}\n/** Default props */\nRadioButton.defaultProps = defaultProps;\n//# sourceMappingURL=RadioButton.js.map"]},"metadata":{},"sourceType":"module"}