{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Projects\\\\ED1-Mini-Project\\\\src\\\\app\\\\frontend\\\\mini-project\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\mdl\\\\Ripple.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, createRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport MKTouchable from \"../internal/MKTouchable\";\nvar UIManager = NativeModules.UIManager;\nvar defaultProps = {\n  borderWidth: 0,\n  disabled: false,\n  maskBorderRadius: 2,\n  maskBorderRadiusInPercent: 0,\n  maskColor: 'rgba(255, 255, 255, 0.15)',\n  maskDuration: 200,\n  maskEnabled: true,\n  rippleColor: 'rgba(255, 255, 255, 0.2)',\n  rippleDuration: 200,\n  rippleLocation: 'tapLocation',\n  shadowAniEnabled: true\n};\n\nvar Ripple = function (_Component) {\n  _inherits(Ripple, _Component);\n\n  var _super = _createSuper(Ripple);\n\n  function Ripple(props) {\n    var _this;\n\n    _classCallCheck(this, Ripple);\n\n    _this = _super.call(this, props);\n    _this.containerRef = createRef();\n    _this.maskRef = createRef();\n    _this.rippleRef = createRef();\n    _this._animatedAlpha = new Animated.Value(0);\n    _this._animatedRippleScale = new Animated.Value(0);\n\n    _this._onLayout = function (evt) {\n      _this._onLayoutChange(evt.nativeEvent.layout);\n\n      _this.props.onLayout && _this.props.onLayout(evt);\n    };\n\n    _this._onTouchEvent = function (evt) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      switch (evt.type) {\n        case 'TOUCH_DOWN':\n          _this._onPointerDown(evt);\n\n          break;\n\n        case 'TOUCH_UP':\n        case 'TOUCH_CANCEL':\n          _this._onPointerUp();\n\n          break;\n\n        default:\n          break;\n      }\n\n      if (_this.props.onTouch) {\n        _this.props.onTouch(evt);\n      }\n    };\n\n    _this.state = {\n      height: 1,\n      width: 1,\n      maskBorderRadius: 0,\n      ripple: {\n        radii: 0,\n        dia: 0,\n        offset: {\n          top: 0,\n          left: 0\n        }\n      },\n      shadowOffsetY: 1\n    };\n    return _this;\n  }\n\n  _createClass(Ripple, [{\n    key: \"measure\",\n    value: function measure(cb) {\n      return this.containerRef.current && UIManager.measure(findNodeHandle(this.containerRef.current) || 0, cb);\n    }\n  }, {\n    key: \"showRipple\",\n    value: function showRipple() {\n      var _this2 = this;\n\n      this._animatedAlpha.setValue(1);\n\n      this._animatedRippleScale.setValue(0.3);\n\n      this._rippleAni = Animated.timing(this._animatedRippleScale, {\n        duration: this.props.rippleDuration || 200,\n        toValue: 1,\n        useNativeDriver: true\n      });\n\n      if (this.props.shadowAniEnabled) {\n        this.setState({\n          shadowOffsetY: 1.5\n        });\n      }\n\n      this._rippleAni.start(function () {\n        _this2._rippleAni = undefined;\n\n        if (_this2._pendingRippleAni) {\n          _this2._pendingRippleAni();\n        }\n      });\n    }\n  }, {\n    key: \"hideRipple\",\n    value: function hideRipple() {\n      var _this3 = this;\n\n      this._pendingRippleAni = function () {\n        Animated.timing(_this3._animatedAlpha, {\n          duration: _this3.props.maskDuration || 200,\n          toValue: 0,\n          useNativeDriver: true\n        }).start();\n\n        if (_this3.props.shadowAniEnabled) {\n          _this3.setState({\n            shadowOffsetY: 1\n          });\n        }\n\n        _this3._pendingRippleAni = undefined;\n      };\n\n      if (!this._rippleAni) {\n        this._pendingRippleAni();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var shadowStyle = {};\n\n      if (this.props.shadowAniEnabled) {\n        shadowStyle.shadowOffset = {\n          height: this.state.shadowOffsetY,\n          width: 0\n        };\n      }\n\n      return React.createElement(MKTouchable, _extends({\n        ref: this.containerRef\n      }, this.props, {\n        style: [this.props.style, shadowStyle],\n        onTouch: this._onTouchEvent,\n        onLayout: this._onLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      }), this.props.children, React.createElement(Animated.View, {\n        ref: this.maskRef,\n        style: {\n          height: this.state.height,\n          width: this.state.width,\n          left: -(this.props.borderWidth || 0),\n          top: -(this.props.borderWidth || 0),\n          backgroundColor: this.props.maskColor,\n          borderRadius: this.state.maskBorderRadius,\n          opacity: this._animatedAlpha,\n          overflow: this.props.maskEnabled ? 'hidden' : 'visible',\n          position: 'absolute'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }, React.createElement(Animated.View, {\n        ref: this.rippleRef,\n        style: _extends(_extends({\n          height: this.state.ripple.dia,\n          width: this.state.ripple.dia\n        }, this.state.ripple.offset), {\n          backgroundColor: this.props.rippleColor,\n          borderRadius: this.state.ripple.radii,\n          transform: [{\n            scale: this._animatedRippleScale\n          }]\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }\n      })));\n    }\n  }, {\n    key: \"_onLayoutChange\",\n    value: function _onLayoutChange(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n\n      if (width === this.state.width && height === this.state.height) {\n        return;\n      }\n\n      this.setState(_extends(_extends({}, this._calcMaskLayer(width, height)), {\n        height: height,\n        width: width\n      }));\n    }\n  }, {\n    key: \"_calcMaskLayer\",\n    value: function _calcMaskLayer(width, height) {\n      var maskRadiiPercent = this.props.maskBorderRadiusInPercent;\n      var maskBorderRadius = this.props.maskBorderRadius || 0;\n\n      if (maskRadiiPercent) {\n        maskBorderRadius = Math.min(width, height) * maskRadiiPercent / 100;\n      }\n\n      return {\n        maskBorderRadius: maskBorderRadius\n      };\n    }\n  }, {\n    key: \"_calcRippleLayer\",\n    value: function _calcRippleLayer(x0, y0) {\n      var _this$state = this.state,\n          width = _this$state.width,\n          height = _this$state.height,\n          maskBorderRadius = _this$state.maskBorderRadius;\n      var maskRadiusPercent = this.props.maskBorderRadiusInPercent || 0;\n      var radii;\n      var hotSpotX = x0;\n      var hotSpotY = y0;\n\n      if (this.props.rippleLocation === 'center') {\n        hotSpotX = width / 2;\n        hotSpotY = height / 2;\n      }\n\n      var offsetX = Math.max(hotSpotX, width - hotSpotX);\n      var offsetY = Math.max(hotSpotY, height - hotSpotY);\n\n      if (Platform.OS === 'android' && this.props.rippleLocation === 'center' && this.props.maskEnabled && maskRadiusPercent > 0) {\n        radii = maskBorderRadius;\n      } else {\n        radii = Math.sqrt(offsetX * offsetX + offsetY * offsetY);\n      }\n\n      return {\n        ripple: {\n          dia: radii * 2,\n          offset: {\n            left: hotSpotX - radii,\n            top: hotSpotY - radii\n          },\n          radii: radii\n        }\n      };\n    }\n  }, {\n    key: \"_onPointerDown\",\n    value: function _onPointerDown(evt) {\n      this.setState(_extends({}, this._calcRippleLayer(evt.x, evt.y)));\n      this.showRipple();\n    }\n  }, {\n    key: \"_onPointerUp\",\n    value: function _onPointerUp() {\n      this.hideRipple();\n    }\n  }]);\n\n  return Ripple;\n}(Component);\n\nexport { Ripple as default };\nRipple.defaultProps = defaultProps;","map":{"version":3,"sources":["C:/Projects/ED1-Mini-Project/src/app/frontend/mini-project/node_modules/react-native-material-kit/lib/mdl/Ripple.js"],"names":["React","Component","createRef","MKTouchable","UIManager","NativeModules","defaultProps","borderWidth","disabled","maskBorderRadius","maskBorderRadiusInPercent","maskColor","maskDuration","maskEnabled","rippleColor","rippleDuration","rippleLocation","shadowAniEnabled","Ripple","props","containerRef","maskRef","rippleRef","_animatedAlpha","Animated","Value","_animatedRippleScale","_onLayout","evt","_onLayoutChange","nativeEvent","layout","onLayout","_onTouchEvent","type","_onPointerDown","_onPointerUp","onTouch","state","height","width","ripple","radii","dia","offset","top","left","shadowOffsetY","cb","current","measure","findNodeHandle","setValue","_rippleAni","timing","duration","toValue","useNativeDriver","setState","start","undefined","_pendingRippleAni","shadowStyle","shadowOffset","style","children","backgroundColor","borderRadius","opacity","overflow","position","transform","scale","_calcMaskLayer","maskRadiiPercent","Math","min","x0","y0","maskRadiusPercent","hotSpotX","hotSpotY","offsetX","max","offsetY","Platform","OS","sqrt","_calcRippleLayer","x","y","showRipple","hideRipple"],"mappings":"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","sourcesContent":["/**\n * Reusable Ripple layout\n *\n * Created by ywu on 15/8/2.\n */\nimport React, { Component, createRef } from 'react';\nimport { Animated, findNodeHandle, NativeModules, Platform, } from 'react-native';\nimport MKTouchable from '../internal/MKTouchable';\nconst UIManager = NativeModules.UIManager;\n/** Default props of {@link Ripple} */\nconst defaultProps = {\n    borderWidth: 0,\n    disabled: false,\n    maskBorderRadius: 2,\n    maskBorderRadiusInPercent: 0,\n    maskColor: 'rgba(255, 255, 255, 0.15)',\n    maskDuration: 200,\n    maskEnabled: true,\n    rippleColor: 'rgba(255, 255, 255, 0.2)',\n    rippleDuration: 200,\n    rippleLocation: 'tapLocation',\n    shadowAniEnabled: true,\n};\n/**\n * Reusable `Ripple` effect.\n */\nexport default class Ripple extends Component {\n    constructor(props) {\n        super(props);\n        this.containerRef = createRef();\n        this.maskRef = createRef();\n        this.rippleRef = createRef();\n        this._animatedAlpha = new Animated.Value(0);\n        this._animatedRippleScale = new Animated.Value(0);\n        this._onLayout = (evt) => {\n            this._onLayoutChange(evt.nativeEvent.layout);\n            this.props.onLayout && this.props.onLayout(evt);\n        };\n        // Touch events handling\n        this._onTouchEvent = (evt) => {\n            if (this.props.disabled) {\n                return;\n            }\n            switch (evt.type) {\n                case 'TOUCH_DOWN':\n                    this._onPointerDown(evt);\n                    break;\n                case 'TOUCH_UP':\n                case 'TOUCH_CANCEL':\n                    this._onPointerUp();\n                    break;\n                default:\n                    break;\n            }\n            if (this.props.onTouch) {\n                this.props.onTouch(evt);\n            }\n        };\n        // [Android] set initial size > 0 to avoid NPE\n        // at `ReactViewBackgroundDrawable.drawRoundedBackgroundWithBorders`\n        // @see https://github.com/facebook/react-native/issues/3069\n        this.state = {\n            height: 1,\n            width: 1,\n            maskBorderRadius: 0,\n            ripple: { radii: 0, dia: 0, offset: { top: 0, left: 0 } },\n            shadowOffsetY: 1,\n        };\n    }\n    /**\n     * Measure the size of the `Ripple`.\n     * @param cb {@link MeasureOnSuccessCallback | measurement callback}\n     */\n    measure(cb) {\n        // eslint-disable-next-line prettier/prettier\n        return this.containerRef.current && UIManager.measure(findNodeHandle(this.containerRef.current) || 0, cb);\n    }\n    /** Start the ripple effect */\n    showRipple() {\n        this._animatedAlpha.setValue(1);\n        this._animatedRippleScale.setValue(0.3);\n        // scaling up the ripple layer\n        this._rippleAni = Animated.timing(this._animatedRippleScale, {\n            duration: this.props.rippleDuration || 200,\n            toValue: 1,\n            useNativeDriver: true,\n        });\n        // enlarge the shadow, if enabled\n        if (this.props.shadowAniEnabled) {\n            this.setState({ shadowOffsetY: 1.5 });\n        }\n        this._rippleAni.start(() => {\n            this._rippleAni = undefined;\n            // if any pending animation, do it\n            if (this._pendingRippleAni) {\n                this._pendingRippleAni();\n            }\n        });\n    }\n    /** Stop the ripple effect */\n    hideRipple() {\n        this._pendingRippleAni = () => {\n            // hide the ripple layer\n            Animated.timing(this._animatedAlpha, {\n                duration: this.props.maskDuration || 200,\n                toValue: 0,\n                useNativeDriver: true,\n            }).start();\n            // scale down the shadow\n            if (this.props.shadowAniEnabled) {\n                this.setState({ shadowOffsetY: 1 });\n            }\n            this._pendingRippleAni = undefined;\n        };\n        if (!this._rippleAni) {\n            // previous ripple animation is done, good to go\n            this._pendingRippleAni();\n        }\n    }\n    /** {@inheritDoc @types/react#Component.render} */\n    render() {\n        const shadowStyle = {};\n        if (this.props.shadowAniEnabled) {\n            shadowStyle.shadowOffset = {\n                height: this.state.shadowOffsetY,\n                width: 0,\n            };\n        }\n        return (<MKTouchable ref={this.containerRef} {...this.props} style={[this.props.style, shadowStyle]} onTouch={this._onTouchEvent} onLayout={this._onLayout}>\n        {this.props.children}\n        <Animated.View ref={this.maskRef} style={{\n            height: this.state.height,\n            width: this.state.width,\n            left: -(this.props.borderWidth || 0),\n            top: -(this.props.borderWidth || 0),\n            backgroundColor: this.props.maskColor,\n            borderRadius: this.state.maskBorderRadius,\n            opacity: this._animatedAlpha,\n            overflow: this.props.maskEnabled ? 'hidden' : 'visible',\n            position: 'absolute',\n        }}>\n          <Animated.View ref={this.rippleRef} style={Object.assign(Object.assign({ height: this.state.ripple.dia, width: this.state.ripple.dia }, this.state.ripple.offset), { backgroundColor: this.props.rippleColor, borderRadius: this.state.ripple.radii, transform: [{ scale: this._animatedRippleScale }] })}/>\n        </Animated.View>\n      </MKTouchable>);\n    }\n    _onLayoutChange({ width, height }) {\n        if (width === this.state.width && height === this.state.height) {\n            return;\n        }\n        this.setState(Object.assign(Object.assign({}, this._calcMaskLayer(width, height)), { height,\n            width }));\n    }\n    // update Mask layer's dimension\n    _calcMaskLayer(width, height) {\n        const maskRadiiPercent = this.props.maskBorderRadiusInPercent;\n        let maskBorderRadius = this.props.maskBorderRadius || 0;\n        if (maskRadiiPercent) {\n            // eslint-disable-next-line prettier/prettier\n            maskBorderRadius = Math.min(width, height) * maskRadiiPercent / 100;\n        }\n        return { maskBorderRadius };\n    }\n    // update Ripple layer's dimension\n    _calcRippleLayer(x0, y0) {\n        const { width, height, maskBorderRadius } = this.state;\n        const maskRadiusPercent = this.props.maskBorderRadiusInPercent || 0;\n        let radii;\n        let hotSpotX = x0;\n        let hotSpotY = y0;\n        if (this.props.rippleLocation === 'center') {\n            hotSpotX = width / 2;\n            hotSpotY = height / 2;\n        }\n        const offsetX = Math.max(hotSpotX, width - hotSpotX);\n        const offsetY = Math.max(hotSpotY, height - hotSpotY);\n        // FIXME Workaround for Android not respect `overflow`\n        // @see https://github.com/facebook/react-native/issues/3198\n        if (Platform.OS === 'android' &&\n            this.props.rippleLocation === 'center' &&\n            this.props.maskEnabled &&\n            maskRadiusPercent > 0) {\n            // limit ripple to the bounds of mask\n            radii = maskBorderRadius;\n        }\n        else {\n            radii = Math.sqrt(offsetX * offsetX + offsetY * offsetY);\n        }\n        return {\n            ripple: {\n                dia: radii * 2,\n                offset: {\n                    left: hotSpotX - radii,\n                    top: hotSpotY - radii,\n                },\n                radii,\n            },\n        };\n    }\n    _onPointerDown(evt) {\n        this.setState(Object.assign({}, this._calcRippleLayer(evt.x, evt.y)));\n        this.showRipple();\n    }\n    _onPointerUp() {\n        this.hideRipple();\n    }\n}\n/** Default props */\nRipple.defaultProps = defaultProps;\n//# sourceMappingURL=Ripple.js.map"]},"metadata":{},"sourceType":"module"}