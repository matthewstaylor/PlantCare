{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Projects\\\\ED1-Mini-Project\\\\src\\\\app\\\\frontend\\\\mini-project\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\internal\\\\SwitchThumb.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MKColor from \"../MKColor\";\nvar defaultProps = {\n  checked: false,\n  pointerEvents: 'none',\n  rippleAniDuration: 250,\n  rippleRadius: 14,\n  style: {\n    elevation: 2,\n    shadowColor: 'black',\n    shadowOffset: {\n      height: 1,\n      width: 0\n    },\n    shadowOpacity: 0.7,\n    shadowRadius: 1\n  }\n};\nexport var Thumb = function (_Component) {\n  _inherits(Thumb, _Component);\n\n  var _super = _createSuper(Thumb);\n\n  function Thumb(props) {\n    var _this;\n\n    _classCallCheck(this, Thumb);\n\n    _this = _super.call(this, props);\n    _this.animatedRippleScale = new Animated.Value(0);\n    _this.animatedRippleAlpha = new Animated.Value(0);\n    _this.state = {\n      checked: props.checked\n    };\n    return _this;\n  }\n\n  _createClass(Thumb, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.checked !== this.props.checked && nextProps.checked !== this.state.checked) {\n        this.setState({\n          checked: nextProps.checked\n        });\n      }\n    }\n  }, {\n    key: \"startToggle\",\n    value: function startToggle() {\n      this.showRipple();\n    }\n  }, {\n    key: \"endToggle\",\n    value: function endToggle() {\n      this.hideRipple();\n    }\n  }, {\n    key: \"confirmToggle\",\n    value: function confirmToggle(fromState) {\n      this.setState({\n        checked: !fromState\n      });\n    }\n  }, {\n    key: \"showRipple\",\n    value: function showRipple() {\n      var _this2 = this;\n\n      this.rippleAni = Animated.parallel([Animated.timing(this.animatedRippleAlpha, {\n        duration: this.props.rippleAniDuration,\n        toValue: 1\n      }), Animated.timing(this.animatedRippleScale, {\n        duration: this.props.rippleAniDuration,\n        toValue: 1\n      })]);\n      this.rippleAni.start(function () {\n        _this2.rippleAni = undefined;\n\n        if (_this2.pendingRippleAni) {\n          _this2.pendingRippleAni();\n        }\n      });\n    }\n  }, {\n    key: \"hideRipple\",\n    value: function hideRipple() {\n      var _this3 = this;\n\n      this.pendingRippleAni = function () {\n        Animated.parallel([Animated.timing(_this3.animatedRippleScale, {\n          duration: _this3.props.rippleAniDuration || 250,\n          toValue: 0\n        }), Animated.timing(_this3.animatedRippleAlpha, {\n          duration: _this3.props.rippleAniDuration || 250,\n          toValue: 0\n        })]).start();\n        _this3.pendingRippleAni = undefined;\n      };\n\n      if (!this.rippleAni) {\n        this.pendingRippleAni();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var rippleSize = this.props.rippleRadius * 2;\n      return React.createElement(View, {\n        style: [this.props.style, {\n          backgroundColor: MKColor.Transparent,\n          height: rippleSize,\n          position: 'absolute',\n          width: rippleSize\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: [defaultProps.style, this.props.thumbStyle, {\n          backgroundColor: this.state.checked ? this.props.onColor : this.props.offColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }), React.createElement(Animated.View, {\n        style: {\n          height: rippleSize,\n          left: 0,\n          top: 0,\n          width: rippleSize,\n          backgroundColor: this.props.rippleColor,\n          borderRadius: this.props.rippleRadius,\n          opacity: this.animatedRippleAlpha,\n          position: 'absolute',\n          transform: [{\n            scale: this.animatedRippleScale\n          }]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Thumb;\n}(Component);\nThumb.defaultProps = defaultProps;\nvar AnimatedThumb = Animated.createAnimatedComponent(Thumb);\nexport default AnimatedThumb;","map":{"version":3,"sources":["C:/Projects/ED1-Mini-Project/src/app/frontend/mini-project/node_modules/react-native-material-kit/lib/internal/SwitchThumb.js"],"names":["React","Component","MKColor","defaultProps","checked","pointerEvents","rippleAniDuration","rippleRadius","style","elevation","shadowColor","shadowOffset","height","width","shadowOpacity","shadowRadius","Thumb","props","animatedRippleScale","Animated","Value","animatedRippleAlpha","state","nextProps","setState","showRipple","hideRipple","fromState","rippleAni","parallel","timing","duration","toValue","start","undefined","pendingRippleAni","rippleSize","backgroundColor","Transparent","position","thumbStyle","onColor","offColor","left","top","rippleColor","borderRadius","opacity","transform","scale","AnimatedThumb","createAnimatedComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Animated, View } from 'react-native';\nimport MKColor from '../MKColor';\nconst defaultProps = {\n    checked: false,\n    pointerEvents: 'none',\n    rippleAniDuration: 250,\n    rippleRadius: 14,\n    style: {\n        elevation: 2,\n        shadowColor: 'black',\n        shadowOffset: {\n            height: 1,\n            width: 0,\n        },\n        shadowOpacity: 0.7,\n        shadowRadius: 1,\n    },\n};\n/***\n * The `Thumb` part of a {@link Switch}.\n * Which is displayed as a circle with shadow and ripple effect.\n */\nexport class Thumb extends Component {\n    constructor(props) {\n        super(props);\n        this.animatedRippleScale = new Animated.Value(0);\n        this.animatedRippleAlpha = new Animated.Value(0);\n        this.state = {\n            checked: props.checked,\n        };\n    }\n    /**\n     * TODO using controlled components.\n     * @see https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html?#preferred-solutions\n     */\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (nextProps.checked !== this.props.checked && nextProps.checked !== this.state.checked) {\n            this.setState({ checked: nextProps.checked });\n        }\n    }\n    /** When a toggle action started. */\n    startToggle() {\n        this.showRipple();\n    }\n    /** When a toggle action is finished (confirmed or canceled). */\n    endToggle() {\n        this.hideRipple();\n    }\n    /**\n     * When a toggle action (from the given state) is confirmed.\n     * @param `fromState` the previous state\n     */\n    confirmToggle(fromState) {\n        this.setState({ checked: !fromState });\n    }\n    /** Start the ripple effect */\n    showRipple() {\n        // scaling up the ripple layer\n        this.rippleAni = Animated.parallel([\n            Animated.timing(this.animatedRippleAlpha, {\n                duration: this.props.rippleAniDuration,\n                toValue: 1,\n            }),\n            Animated.timing(this.animatedRippleScale, {\n                duration: this.props.rippleAniDuration,\n                toValue: 1,\n            }),\n        ]);\n        this.rippleAni.start(() => {\n            this.rippleAni = undefined;\n            // if any pending animation, do it\n            if (this.pendingRippleAni) {\n                this.pendingRippleAni();\n            }\n        });\n    }\n    /** Stop the ripple effect */\n    hideRipple() {\n        this.pendingRippleAni = () => {\n            Animated.parallel([\n                Animated.timing(this.animatedRippleScale, {\n                    duration: this.props.rippleAniDuration || 250,\n                    toValue: 0,\n                }),\n                Animated.timing(this.animatedRippleAlpha, {\n                    duration: this.props.rippleAniDuration || 250,\n                    toValue: 0,\n                }),\n            ]).start();\n            this.pendingRippleAni = undefined;\n        };\n        if (!this.rippleAni) {\n            // previous ripple animation is done, good to go\n            this.pendingRippleAni();\n        }\n    }\n    // Rendering the `Thumb`\n    render() {\n        const rippleSize = this.props.rippleRadius * 2;\n        return (<View style={[\n            this.props.style,\n            {\n                backgroundColor: MKColor.Transparent,\n                height: rippleSize,\n                position: 'absolute',\n                width: rippleSize,\n            },\n        ]}>\n        <View // the circle\n         style={[\n            defaultProps.style,\n            this.props.thumbStyle,\n            { backgroundColor: this.state.checked ? this.props.onColor : this.props.offColor },\n        ]}/>\n        <Animated.View // the ripple layer\n         style={{\n            height: rippleSize,\n            left: 0,\n            top: 0,\n            width: rippleSize,\n            backgroundColor: this.props.rippleColor,\n            borderRadius: this.props.rippleRadius,\n            opacity: this.animatedRippleAlpha,\n            position: 'absolute',\n            transform: [{ scale: this.animatedRippleScale }],\n        }}/>\n      </View>);\n    }\n}\n/** Default props of `Thumb` */\nThumb.defaultProps = defaultProps;\n// Enable animations on `Thumb`\nconst AnimatedThumb = Animated.createAnimatedComponent(Thumb);\nexport default AnimatedThumb;\n//# sourceMappingURL=SwitchThumb.js.map"]},"metadata":{},"sourceType":"module"}