{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Projects\\\\ED1-Mini-Project\\\\src\\\\app\\\\frontend\\\\mini-project\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\internal\\\\Thumb.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport View from \"react-native-web/dist/exports/View\";\nvar DEFAULT_UPPER_TRACK_COLOR = '#cccccc';\nvar LOWEST_VALUE_THUMB_COLOR = 'white';\nvar THUMB_SCALE_RATIO = 1.3;\nvar THUMB_BORDER_WIDTH = 2;\nvar TRACK_EXTRA_MARGIN_H = 5;\nvar defaultProps = {\n  radius: 6,\n  disabledColor: DEFAULT_UPPER_TRACK_COLOR,\n  touchPadding: 0\n};\n\nvar Thumb = function (_Component) {\n  _inherits(Thumb, _Component);\n\n  var _super = _createSuper(Thumb);\n\n  function Thumb(props) {\n    var _this;\n\n    _classCallCheck(this, Thumb);\n\n    _this = _super.call(this, props);\n    _this.x = 0;\n    _this._radii = 0;\n    _this._dia = 0;\n    _this._containerRadii = 0;\n    _this._containerDia = 0;\n    _this._panResponder = {};\n    _this._animatedLeft = new Animated.Value(0);\n    _this._animatedScale = new Animated.Value(1);\n    _this._trackMarginH = ((props.radius || 0) + THUMB_BORDER_WIDTH) * THUMB_SCALE_RATIO + TRACK_EXTRA_MARGIN_H;\n    _this.state = {\n      color: LOWEST_VALUE_THUMB_COLOR,\n      borderColor: DEFAULT_UPPER_TRACK_COLOR\n    };\n    return _this;\n  }\n\n  _createClass(Thumb, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      var _this2 = this;\n\n      this._panResponder = PanResponder.create({\n        onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n          return true;\n        },\n        onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {\n          return true;\n        },\n        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {\n          return true;\n        },\n        onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture() {\n          return true;\n        },\n        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {\n          return false;\n        },\n        onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {\n          return true;\n        },\n        onPanResponderGrant: function onPanResponderGrant(e) {\n          return _this2.props.onGrant && _this2.props.onGrant(_this2, e);\n        },\n        onPanResponderMove: function onPanResponderMove(e) {\n          return _this2.props.onMove && _this2.props.onMove(_this2, e);\n        },\n        onPanResponderRelease: function onPanResponderRelease(e) {\n          return _this2.props.onEnd && _this2.props.onEnd(_this2, e);\n        },\n        onPanResponderTerminate: function onPanResponderTerminate(e) {\n          return _this2.props.onEnd && _this2.props.onEnd(_this2, e);\n        }\n      });\n\n      this._onRadiiUpdate(this.props);\n\n      this.setState({\n        borderColor: this.props.disabledColor\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._animatedLeft.addListener(this._getOnSliding());\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      this._onRadiiUpdate(nextProps);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._animatedLeft.removeAllListeners();\n    }\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(x) {\n      this.x = x;\n      var x0 = this.x + this._trackMarginH;\n      Animated.parallel([Animated.timing(this._animatedScale, {\n        toValue: THUMB_SCALE_RATIO,\n        duration: 100\n      }), Animated.timing(this._animatedLeft, {\n        toValue: x0 - this._containerRadii,\n        duration: 0\n      })]).start();\n    }\n  }, {\n    key: \"confirmMoveTo\",\n    value: function confirmMoveTo() {\n      Animated.timing(this._animatedScale, {\n        toValue: 1,\n        duration: 100\n      }).start();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Animated.View, _extends({\n        style: [this.props.style, {\n          width: this._containerDia,\n          height: this._containerDia,\n          backgroundColor: this.state.borderColor,\n          borderRadius: this._containerRadii,\n          position: 'absolute',\n          left: this._animatedLeft,\n          transform: [{\n            scale: this._animatedScale\n          }]\n        }]\n      }, this._panResponder.panHandlers, {\n        hitSlop: {\n          top: this.props.touchPadding,\n          left: this.props.touchPadding,\n          bottom: this.props.touchPadding,\n          right: this.props.touchPadding\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: {\n          width: this._dia,\n          height: this._dia,\n          backgroundColor: this.state.color,\n          borderRadius: this._radii,\n          top: THUMB_BORDER_WIDTH,\n          left: THUMB_BORDER_WIDTH\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"_onRadiiUpdate\",\n    value: function _onRadiiUpdate(props) {\n      this._radii = props.radius || 0;\n      this._dia = this._radii * 2;\n      this._containerRadii = this._radii + THUMB_BORDER_WIDTH;\n      this._containerDia = this._containerRadii * 2;\n    }\n  }, {\n    key: \"_getOnSliding\",\n    value: function _getOnSliding() {\n      var _this3 = this;\n\n      var prevX = this.x;\n      return function (_ref) {\n        var value = _ref.value;\n        var x = value + _this3._containerRadii - _this3._trackMarginH;\n\n        if (prevX <= 0 && x > 0) {\n          _this3._onExplode();\n        } else if (prevX > 0 && x <= 0) {\n          _this3._onCollapse();\n        }\n\n        prevX = x;\n      };\n    }\n  }, {\n    key: \"_onExplode\",\n    value: function _onExplode() {\n      this.setState({\n        borderColor: this.props.enabledColor,\n        color: this.props.enabledColor\n      });\n    }\n  }, {\n    key: \"_onCollapse\",\n    value: function _onCollapse() {\n      this.setState({\n        borderColor: this.props.disabledColor,\n        color: LOWEST_VALUE_THUMB_COLOR\n      });\n    }\n  }]);\n\n  return Thumb;\n}(Component);\n\nexport { Thumb as default };\nThumb.defaultProps = defaultProps;","map":{"version":3,"sources":["C:/Projects/ED1-Mini-Project/src/app/frontend/mini-project/node_modules/react-native-material-kit/lib/internal/Thumb.js"],"names":["React","Component","DEFAULT_UPPER_TRACK_COLOR","LOWEST_VALUE_THUMB_COLOR","THUMB_SCALE_RATIO","THUMB_BORDER_WIDTH","TRACK_EXTRA_MARGIN_H","defaultProps","radius","disabledColor","touchPadding","Thumb","props","x","_radii","_dia","_containerRadii","_containerDia","_panResponder","_animatedLeft","Animated","Value","_animatedScale","_trackMarginH","state","color","borderColor","PanResponder","create","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderTerminationRequest","onShouldBlockNativeResponder","onPanResponderGrant","e","onGrant","onPanResponderMove","onMove","onPanResponderRelease","onEnd","onPanResponderTerminate","_onRadiiUpdate","setState","addListener","_getOnSliding","nextProps","removeAllListeners","x0","parallel","timing","toValue","duration","start","style","width","height","backgroundColor","borderRadius","position","left","transform","scale","panHandlers","top","bottom","right","prevX","value","_onExplode","_onCollapse","enabledColor"],"mappings":"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","sourcesContent":["/**\n * The `Thumb` part of {@link Slider} and {@link RangeSlider} components.\n *\n * Created by awaidman on 16/1/21.\n */\nimport React, { Component } from 'react';\nimport { Animated, PanResponder, View, } from 'react-native';\n// Default color of the upper part of the track\nconst DEFAULT_UPPER_TRACK_COLOR = '#cccccc';\n// Color of the thumb when lowest value is chosen\nconst LOWEST_VALUE_THUMB_COLOR = 'white';\n// The max scale of the thumb\nconst THUMB_SCALE_RATIO = 1.3;\n// Width of the thumb border\nconst THUMB_BORDER_WIDTH = 2;\n// extra spacing enlarging the touchable area\nconst TRACK_EXTRA_MARGIN_H = 5;\n/** Default props, see {@link ThumbProps} */\nconst defaultProps = {\n    radius: 6,\n    disabledColor: DEFAULT_UPPER_TRACK_COLOR,\n    touchPadding: 0,\n};\n/** `Thumb` component of {@link Slider} and {@link RangeSlider}. */\nexport default class Thumb extends Component {\n    constructor(props) {\n        super(props);\n        /** current x-axis position */\n        this.x = 0;\n        this._radii = 0;\n        this._dia = 0;\n        this._containerRadii = 0;\n        this._containerDia = 0;\n        this._panResponder = {};\n        this._animatedLeft = new Animated.Value(0);\n        this._animatedScale = new Animated.Value(1);\n        this._trackMarginH =\n            ((props.radius || 0) + THUMB_BORDER_WIDTH) * THUMB_SCALE_RATIO + TRACK_EXTRA_MARGIN_H;\n        this.state = {\n            color: LOWEST_VALUE_THUMB_COLOR,\n            borderColor: DEFAULT_UPPER_TRACK_COLOR,\n        };\n    }\n    UNSAFE_componentWillMount() {\n        this._panResponder = PanResponder.create({\n            onStartShouldSetPanResponder: () => true,\n            onStartShouldSetPanResponderCapture: () => true,\n            onMoveShouldSetPanResponder: () => true,\n            onMoveShouldSetPanResponderCapture: () => true,\n            onPanResponderTerminationRequest: () => false,\n            onShouldBlockNativeResponder: () => true,\n            onPanResponderGrant: e => this.props.onGrant && this.props.onGrant(this, e),\n            onPanResponderMove: e => this.props.onMove && this.props.onMove(this, e),\n            onPanResponderRelease: e => this.props.onEnd && this.props.onEnd(this, e),\n            onPanResponderTerminate: e => this.props.onEnd && this.props.onEnd(this, e),\n        });\n        this._onRadiiUpdate(this.props);\n        this.setState({\n            borderColor: this.props.disabledColor,\n        });\n    }\n    componentDidMount() {\n        this._animatedLeft.addListener(this._getOnSliding());\n    }\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        this._onRadiiUpdate(nextProps);\n    }\n    componentWillUnmount() {\n        this._animatedLeft.removeAllListeners();\n    }\n    /**\n     * animate the sliding\n     * @param x target position, relative to the track\n     */\n    moveTo(x) {\n        this.x = x;\n        const x0 = this.x + this._trackMarginH;\n        Animated.parallel([\n            Animated.timing(this._animatedScale, {\n                toValue: THUMB_SCALE_RATIO,\n                duration: 100,\n            }),\n            Animated.timing(this._animatedLeft, {\n                toValue: x0 - this._containerRadii,\n                duration: 0,\n            }),\n        ]).start();\n    }\n    /** stop sliding */\n    confirmMoveTo() {\n        Animated.timing(this._animatedScale, {\n            toValue: 1,\n            duration: 100,\n        }).start();\n    }\n    /** {@inheritDoc @types/react#Component.render} */\n    render() {\n        // noinspection JSSuspiciousNameCombination\n        return (\n        // the outer circle to draw the border\n        <Animated.View style={[\n            this.props.style,\n            {\n                width: this._containerDia,\n                height: this._containerDia,\n                backgroundColor: this.state.borderColor,\n                borderRadius: this._containerRadii,\n                position: 'absolute',\n                left: this._animatedLeft,\n                transform: [{ scale: this._animatedScale }],\n            },\n        ]} {...this._panResponder.panHandlers} hitSlop={{\n            top: this.props.touchPadding,\n            left: this.props.touchPadding,\n            bottom: this.props.touchPadding,\n            right: this.props.touchPadding,\n        }}>\n        \n        <View style={{\n            width: this._dia,\n            height: this._dia,\n            backgroundColor: this.state.color,\n            borderRadius: this._radii,\n            top: THUMB_BORDER_WIDTH,\n            left: THUMB_BORDER_WIDTH,\n        }}/>\n      </Animated.View>);\n    }\n    // when thumb radii updated, re-calc the dimensions\n    _onRadiiUpdate(props) {\n        this._radii = props.radius || 0;\n        this._dia = this._radii * 2;\n        this._containerRadii = this._radii + THUMB_BORDER_WIDTH;\n        this._containerDia = this._containerRadii * 2;\n    }\n    // return a memoized function to handle sliding animation events\n    _getOnSliding() {\n        let prevX = this.x; // memorize the previous x\n        // on sliding of the thumb\n        // `value` - the `left` of the thumb, relative to the container\n        return ({ value }) => {\n            // convert to value relative to the track\n            const x = value + this._containerRadii - this._trackMarginH;\n            if (prevX <= 0 && x > 0) {\n                // leaving the lowest value, scale up the thumb\n                this._onExplode();\n            }\n            else if (prevX > 0 && x <= 0) {\n                // at lowest value, scale down the thumb\n                this._onCollapse();\n            }\n            prevX = x;\n        };\n    }\n    // from 'lowest' to 'non-lowest'\n    _onExplode() {\n        this.setState({\n            borderColor: this.props.enabledColor,\n            color: this.props.enabledColor,\n        });\n    }\n    // from 'non-lowest' to 'lowest'\n    _onCollapse() {\n        this.setState({\n            borderColor: this.props.disabledColor,\n            color: LOWEST_VALUE_THUMB_COLOR,\n        });\n    }\n}\n/** Defaults, see {@link defaultProps} */\nThumb.defaultProps = defaultProps;\n//# sourceMappingURL=Thumb.js.map"]},"metadata":{},"sourceType":"module"}